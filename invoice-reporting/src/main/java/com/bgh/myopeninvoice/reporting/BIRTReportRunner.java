/*
 * Copyright 2017 Branislav Cavlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.bgh.myopeninvoice.reporting;

import com.bgh.myopeninvoice.reporting.exception.BirtReportException;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.birt.core.exception.BirtException;
import org.eclipse.birt.core.framework.Platform;
import org.eclipse.birt.report.engine.api.*;
import org.eclipse.core.internal.registry.RegistryProviderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.sql.DataSource;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Map;
import java.util.logging.Level;

/** Created by bcavlin on 07/05/17. */
@Slf4j
@SuppressWarnings("unchecked")
@Service
public class BIRTReportRunner implements ReportRunner {

  private IReportEngine birtReportEngine = null;

  @Autowired private DataSource dataSource;

  /** Starts up and configures the BIRT Report Engine */
  @PostConstruct
  public void startUp() {
    try {
      EngineConfig engineConfig = new EngineConfig();
      engineConfig.setLogConfig(null, Level.OFF);

      // Required due to a bug in BIRT that occurs in calling Startup after the Platform has already
      // been started up
      RegistryProviderFactory.releaseDefault();
      Platform.startup(engineConfig);
      IReportEngineFactory reportEngineFactory =
          (IReportEngineFactory)
              Platform.createFactoryObject(IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY);
      birtReportEngine = reportEngineFactory.createReportEngine(engineConfig);

    } catch (BirtException e) {
      log.error("Birt Startup Error: {}", e.getMessage());
    }
  }

  /** Shuts down the BIRT Report Engine */
  @PreDestroy
  public void shutdown() {
    birtReportEngine.destroy();
    RegistryProviderFactory.releaseDefault();
    Platform.shutdown();
  }

  /**
   * This method creates and executes the report task, the main responsibility of the entire Report
   * Service. This method is key to enabling pagination for the BIRT report. The IRunTask run task
   * is created and then used to generate an ".rptdocument" binary file. This binary file is then
   * read by the separately created IRenderTask render task. The render task renders the binary
   * document as a binary PDF output stream which is then returned from the method.
   *
   * <p>
   *
   * @param birtReport the report object created at the controller to hold the data of the report
   *     request.
   * @return Returns a ByteArrayOutputStream of the PDF bytes generated by the
   */
  @Override
  public ByteArrayOutputStream runReport(Report birtReport) {

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

    try {
      IReportRunnable reportDesign =
          birtReportEngine.openReportDesign(new ByteArrayInputStream(birtReport.getTemplate()));
      IRunAndRenderTask runAndRenderTask = birtReportEngine.createRunAndRenderTask(reportDesign);

      if (birtReport.getParameters().size() > 0) {
        for (Map.Entry<String, Object> entry : birtReport.getParameters().entrySet()) {
          runAndRenderTask.setParameterValue(entry.getKey(), entry.getValue());
        }
        runAndRenderTask.validateParameters();
      }

      PDFRenderOption pdfRenderOption = new PDFRenderOption();
      pdfRenderOption.setOption(IPDFRenderOption.REPAGINATE_FOR_PDF, Boolean.TRUE);
      pdfRenderOption.setOutputFormat("pdf");
      pdfRenderOption.setOutputStream(byteArrayOutputStream);

      runAndRenderTask.setRenderOption(pdfRenderOption);
      runAndRenderTask
          .getAppContext()
          .put("OdaJDBCDriverPassInConnection", dataSource.getConnection());
      runAndRenderTask.run();
      runAndRenderTask.close();

    } catch (Exception e) {
      log.error("Error while running report task: {}.", e.getMessage());
      throw new BirtReportException(e.getMessage(), e);
    }

    return byteArrayOutputStream;
  }
}
