DROP SCHEMA IF EXISTS INVOICE;
CREATE SCHEMA IF NOT EXISTS INVOICE;

CREATE TABLE IF NOT EXISTS INVOICE.USERS (
  USER_ID     INT          NOT NULL IDENTITY,
  USERNAME    VARCHAR2(50) NOT NULL,
  PASSWORD    VARCHAR2(200),
  LAST_LOGGED TIMESTAMP,
  ENABLED     BOOLEAN      NOT NULL DEFAULT FALSE,
  UNIQUE (USERNAME)
);

CREATE TABLE IF NOT EXISTS INVOICE.ROLES (
  ROLE_ID   INT          NOT NULL PRIMARY KEY,
  ROLE_NAME VARCHAR2(50) NOT NULL,
  UNIQUE (ROLE_NAME)
);

CREATE TABLE IF NOT EXISTS INVOICE.USER_ROLE (
  USER_ROLE_ID  INT       NOT NULL IDENTITY,
  USER_ID       INT       NOT NULL,
  ROLE_ID       INT       NOT NULL,
  DATE_ASSIGNED TIMESTAMP NOT NULL DEFAULT SYSTIMESTAMP,
  FOREIGN KEY (USER_ID) REFERENCES INVOICE.USER (USER_ID),
  FOREIGN KEY (ROLE_ID) REFERENCES INVOICE.ROLE (ROLE_ID),
  UNIQUE (USER_ID, ROLE_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.COMPANIES (
  COMPANY_ID      INT           NOT NULL IDENTITY,
  COMPANY_NAME    VARCHAR2(255) NOT NULL,
  SHORT_NAME      VARCHAR2(10)  NOT NULL
  COMMENT 'Used for the invoice prefix',
  ADDRESS_LINE1   VARCHAR2(500) NOT NULL,
  ADDRESS_LINE2   VARCHAR2(500),
  PHONE1          VARCHAR2(20),
  OWNED_BY_ME     BOOLEAN       NOT NULL DEFAULT TRUE,
  BUSINESS_NUMBER VARCHAR2(30),
  CONTENT         BLOB COMMENT 'Company logo',
  UNIQUE (COMPANY_NAME),
  UNIQUE (SHORT_NAME)
);

CREATE TABLE IF NOT EXISTS INVOICE.CONTACTS (
  CONTACT_ID    INT           NOT NULL IDENTITY,
  FIRST_NAME    VARCHAR2(100) NOT NULL,
  LAST_NAME     VARCHAR2(100),
  MIDDLE_NAME   VARCHAR2(100),
  EMAIL         VARCHAR2(255) NOT NULL,
  ADDRESS_LINE1 VARCHAR2(500),
  ADDRESS_LINE2 VARCHAR2(500),
  PHONE1        VARCHAR2(20),
  USER_ID       INT,
  FOREIGN KEY (USER_ID) REFERENCES INVOICE.USER (USER_ID),
  UNIQUE (EMAIL)
);

CREATE TABLE IF NOT EXISTS INVOICE.COMPANY_CONTACT (
  COMPANY_CONTACT_ID INT NOT NULL IDENTITY,
  CONTACT_ID         INT NOT NULL,
  COMPANY_ID         INT NOT NULL,
  FOREIGN KEY (CONTACT_ID) REFERENCES INVOICE.CONTACT (CONTACT_ID),
  FOREIGN KEY (COMPANY_ID) REFERENCES INVOICE.COMPANY (COMPANY_ID),
  UNIQUE (CONTACT_ID, COMPANY_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.CURRENCY (
  CCY_ID      INT           NOT NULL IDENTITY,
  NAME        VARCHAR2(10)  NOT NULL,
  DESCRIPTION VARCHAR2(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS INVOICE.CONTRACTS (
  CONTRACT_ID                      INT          NOT NULL IDENTITY,
  CONTRACT_IS_FOR                  INT          NOT NULL,
  CONTRACT_SIGNED_WITH             INT          NOT NULL
  COMMENT 'This indicates to which company we are billing to and signing contract with',
  CONTRACT_SIGNED_WITH_SUBCONTRACT INT COMMENT 'This indicates to which company we are actually doing work with',
  RATE                             DECIMAL      NOT NULL,
  RATE_UNIT                        VARCHAR2(10) NOT NULL DEFAULT 'HOUR',
  CCY_ID                           INT          NOT NULL,
  VALID_FROM                       DATE         NOT NULL,
  VALID_TO                         DATE,
  DESCRIPTION                      VARCHAR2(100),
  FOREIGN KEY (CONTRACT_IS_FOR) REFERENCES INVOICE.COMPANY_CONTACT (COMPANY_CONTACT_ID),
  FOREIGN KEY (CONTRACT_SIGNED_WITH) REFERENCES INVOICE.COMPANY (COMPANY_ID),
  FOREIGN KEY (CONTRACT_SIGNED_WITH_SUBCONTRACT) REFERENCES INVOICE.COMPANY (COMPANY_ID),
  FOREIGN KEY (CCY_ID) REFERENCES INVOICE.CURRENCY (CCY_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.TAX (
  TAX_ID     INT          NOT NULL IDENTITY,
  PERCENT    DECIMAL      NOT NULL,
  IDENTIFIER VARCHAR2(50) NOT NULL,
  UNIQUE (IDENTIFIER)
);

CREATE TABLE IF NOT EXISTS INVOICE.INVOICE (
  INVOICE_ID           INT           NOT NULL IDENTITY,
  COMPANY_TO           INT           NOT NULL,
  COMPANY_CONTACT_FROM INT           NOT NULL,
  FROM_DATE            DATE          NOT NULL,
  TO_DATE              DATE          NOT NULL,
  CREATED_DATE         DATE          NOT NULL DEFAULT SYSTIMESTAMP,
  TITLE                VARCHAR2(255) NOT NULL DEFAULT 'Invoice',
  DUE_DATE             DATE          NOT NULL,
  TAX_PERCENT          DECIMAL       NOT NULL,
  NOTE                 VARCHAR2(2000),
  PAID_DATE            DATE,
  RATE                 DECIMAL,
  RATE_UNIT            VARCHAR2(10),
  CCY_ID               INT           NOT NULL,
  FOREIGN KEY (COMPANY_TO) REFERENCES INVOICE.COMPANY (COMPANY_ID),
  FOREIGN KEY (COMPANY_CONTACT_FROM) REFERENCES INVOICE.COMPANY_CONTACT (COMPANY_CONTACT_ID),
  FOREIGN KEY (CCY_ID) REFERENCES INVOICE.CURRENCY (CCY_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.ATTACHMENT (
  ATTACHMENT_ID INT           NOT NULL IDENTITY,
  INVOICE_ID    INT           NOT NULL,
  CONTENT       BLOB          NOT NULL
  COMMENT 'File content',
  FILENAME      VARCHAR2(255) NOT NULL,
  FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE.INVOICE (INVOICE_ID),
  UNIQUE (FILENAME)
);

CREATE TABLE IF NOT EXISTS INVOICE.INVOICE_ITEMS (
  INVOICE_ITEM_ID INT           NOT NULL IDENTITY,
  INVOICE_ID      INT           NOT NULL,
  DESCRIPTION     VARCHAR2(255) NOT NULL,
  CODE            VARCHAR2(255),
  QUANTITY        DECIMAL       NOT NULL,
  UNIT            VARCHAR2(20)  NOT NULL DEFAULT 'HOUR',
  FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE.INVOICE (INVOICE_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.TIME_SHEET (
  TIMESHEET_ID    INT     NOT NULL IDENTITY,
  INVOICE_ITEM_ID INT     NOT NULL,
  ITEM_DATE       DATE    NOT NULL,
  HOURS_WORKED    DECIMAL NOT NULL,
  FOREIGN KEY (INVOICE_ITEM_ID) REFERENCES INVOICE.INVOICE_ITEMS (INVOICE_ITEM_ID)
);

CREATE TABLE IF NOT EXISTS INVOICE.REPORTS (
  REPORT_ID    INT       NOT NULL IDENTITY,
  INVOICE_ID   INT       NOT NULL,
  CONTENT      BLOB      NOT NULL,
  DATE_CREATED TIMESTAMP NOT NULL DEFAULT SYSTIMESTAMP,
  REPORT_NAME  VARCHAR(255),
  FOREIGN KEY (INVOICE_ID) REFERENCES INVOICE.INVOICE (INVOICE_ID)
);

CREATE SEQUENCE INVOICE.INVOICE_COUNTER_SEQ
  START WITH 1;

ALTER TABLE INVOICE.CONTRACT
  ADD CONTRACT_NUMBER VARCHAR2(50);
ALTER TABLE INVOICE.CONTRACT
  ADD CONTENT BLOB COMMENT 'Contract document';

--addon column for the purchase order
ALTER TABLE INVOICE.CONTRACT
  ADD PURCHASE_ORDER VARCHAR2(50);

--addon column for the week start
ALTER TABLE INVOICE.COMPANY
  ADD WEEK_START INT DEFAULT 1 NOT NULL;

--change link from company to active contract
ALTER TABLE INVOICE.INVOICE
  ADD COMPANY_CONTRACT_TO INT;
ALTER TABLE INVOICE.INVOICE
  ADD FOREIGN KEY (COMPANY_CONTRACT_TO) REFERENCES INVOICE.CONTRACT (CONTRACT_ID);
--to be added second after previous statement
ALTER TABLE INVOICE.INVOICE
  ALTER COLUMN COMPANY_CONTRACT_TO INT NOT NULL;

--new from 0.2.0
CREATE SEQUENCE INVOICE.CONTRACT_COUNTER_SEQ
  START WITH 4
  INCREMENT BY 2;

--new from 0.2.3
CREATE TABLE INVOICE.OAUTH_ACCESS_TOKEN
(
  TOKEN_ID          VARCHAR(256) DEFAULT 'NULL',
  TOKEN             BLOB,
  AUTHENTICATION_ID VARCHAR(256) DEFAULT 'NULL',
  USER_NAME         VARCHAR(256) DEFAULT 'NULL',
  CLIENT_ID         VARCHAR(256) DEFAULT 'NULL',
  AUTHENTICATION    BLOB,
  REFRESH_TOKEN     VARCHAR(256) DEFAULT 'NULL'
);


CREATE TABLE INVOICE.OAUTH_REFRESH_TOKEN
(
  TOKEN_ID       VARCHAR(256) DEFAULT 'NULL',
  TOKEN          BLOB,
  AUTHENTICATION BLOB
);

CREATE TABLE INVOICE.OAUTH_CODE (
  CODE           VARCHAR(255),
  AUTHENTICATION BLOB
);

CREATE TABLE INVOICE.OAUTH_CLIENT_DETAILS (
  CLIENT_ID               VARCHAR(255) PRIMARY KEY,
  RESOURCE_IDS            VARCHAR(255),
  CLIENT_SECRET           VARCHAR(255),
  SCOPE                   VARCHAR(255),
  AUTHORIZED_GRANT_TYPES  VARCHAR(255),
  WEB_SERVER_REDIRECT_URI VARCHAR(255),
  AUTHORITIES             VARCHAR(255),
  ACCESS_TOKEN_VALIDITY   INTEGER,
  REFRESH_TOKEN_VALIDITY  INTEGER,
  ADDITIONAL_INFORMATION  VARCHAR(4096),
  AUTOAPPROVE             VARCHAR(255)
);